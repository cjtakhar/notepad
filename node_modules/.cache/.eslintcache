[{"/Users/cj/WebDev/React/notepad/src/index.js":"1","/Users/cj/WebDev/React/notepad/src/App.js":"2","/Users/cj/WebDev/React/notepad/src/reportWebVitals.js":"3","/Users/cj/WebDev/React/notepad/src/components/notepad.js":"4","/Users/cj/WebDev/React/notepad/src/components/login.js":"5"},{"size":332,"mtime":1648501049095,"results":"6","hashOfConfig":"7"},{"size":250,"mtime":1648504680403,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1648443085526,"results":"9","hashOfConfig":"7"},{"size":403,"mtime":1648501023222,"results":"10","hashOfConfig":"7"},{"size":2071,"mtime":1648505917155,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"e8xz90",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/cj/WebDev/React/notepad/src/index.js",[],["25","26"],"/Users/cj/WebDev/React/notepad/src/App.js",[],["27","28"],"/Users/cj/WebDev/React/notepad/src/reportWebVitals.js",[],"/Users/cj/WebDev/React/notepad/src/components/notepad.js",[],"/Users/cj/WebDev/React/notepad/src/components/login.js",["29","30"],"import React, { useState, useEffect } from 'react';\n\nexport default function Login() {\n    const [errorMessages, setErrorMessages] = useState({});\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const renderErrorMessage = (name) =>\n        name === errorMessages.name && (\n            <div className=\"error\">{errorMessages.message}</div>\n        );\n\n    const database = [\n        {\n            username: \"user1\",\n            password: \"pass1\"\n        },\n        {\n            username: \"user2\",\n            password: \"pass2\"\n        }\n    ];\n\n    const errors = {\n        uname: \"invalid username\",\n        pass: \"invalid password\"\n    };\n\n    const handleSubmit = (event) => {\n        // prevent page reload\n        event.preventDefault();\n        var { uname, pass } = document.forms[0]\n        // find user login info\n        const userData = database.find((user) => user.username === uname.value) \n        // compare user info\n        if (userData) {\n            if (userData.password !== pass.value) {\n                // invalid password\n                setErrorMessages({name: \"pass\", message: errors.pass});\n            } else {\n                setIsSubmitted(true);\n            }\n        }   else {\n            // username not found\n            setErrorMessages({name: \"uname\", message: errors.uname});\n        }\n    };\n    \n    return(\n        <div className=\"form\">\n            <form onSubmit={handleSubmit}>\n                <div className=\"input-container\">\n                    <label>Username</label>\n                    <input type=\"text\" name=\"uname\" required />\n                    {renderErrorMessage(\"uname\")}\n                </div>\n                <div className=\"input-container\">\n                    <label>Password</label>\n                    <input type=\"password\" name=\"pass\" required />\n                    {renderErrorMessage(\"pass\")}\n                </div>\n                <div className=\"button-container\">\n                    <input type=\"submit\" />\n                </div>\n            </form>            \n        </div>\n    )\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"31","replacedBy":"35"},{"ruleId":"33","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":36},{"ruleId":"37","severity":1,"message":"41","line":5,"column":12,"nodeType":"39","messageId":"40","endLine":5,"endColumn":23},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],["42"],["43"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'isSubmitted' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]